{"title":"笔记-计算机安全","uid":"367c4ae2735e8df1bc976f97aeb76f16","slug":"笔记/笔记-计算机安全","date":"2025-05-20T16:28:12.000Z","updated":"2025-05-22T13:27:29.676Z","comments":true,"path":"api/articles/笔记/笔记-计算机安全.json","keywords":null,"cover":"\\img\\post\\笔记\\笔记-计算机安全\\cover.png","content":"<h1 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h1>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\"></a> 作用 ++</h2>\n<ul>\n<li>预防 Prevention：防止资产被访问和损坏</li>\n<li>检测 Detection：检测资产被访问或损坏的步骤</li>\n<li>恢复 Recovery：使我们能够从资产(asset)损坏中恢复的措施\n<ul>\n<li>资产可以是实物，也可以仅仅是信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"定义-cia\"><a class=\"markdownIt-Anchor\" href=\"#定义-cia\"></a> 定义 (CIA) ++</h2>\n<ul>\n<li>机密性 Confidentiality：防止未经授权的信息披露 prevention of unauthorised <strong>disclosure</strong> of information\n<ul>\n<li>防止未经授权的用户读取私人或秘密信息</li>\n</ul>\n</li>\n<li>完整性 Integrity：防止未经授权的信息修改 prevention of unauthorised <strong>modification</strong> of information\n<ul>\n<li>真实性 Authenticity =  Integrity + Freshness (时效性)</li>\n</ul>\n</li>\n<li>可用性 Availability：防止未经授权的信息或资源被扣留  prevention of unauthorised <strong>witholding</strong> of information or resources\n<ul>\n<li>确保授权用户在需要时能访问资源，防止拒绝服务（DoS）</li>\n<li>问责 Accountability：用户应对其行为负责\n<ul>\n<li>系统应识别和验证用户，并确保合规</li>\n<li>必须保留审计跟踪</li>\n<li>大学制定了详细的审计跟踪政策！</li>\n</ul>\n</li>\n<li>不可否认性 Non-repudiation\n<ul>\n<li>提供不可伪造的证据，证明某人做了某事</li>\n<li>主要为法律概念</li>\n<li>可由受信任的第三方验证的证据\n<ul>\n<li>例如：公证人、数字证书</li>\n</ul>\n</li>\n<li>适用于物理安全：例如：钥匙卡</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>安全可以被视为控制信息访问。</p>\n<ul>\n<li>Data 数据：一种表示信息的方式 (means)</li>\n<li>Information 信息：对数据的解读 (interpretation)</li>\n</ul>\n<h2 id=\"根本矛盾\"><a class=\"markdownIt-Anchor\" href=\"#根本矛盾\"></a> 根本矛盾</h2>\n<ul>\n<li>Security vs. usability (~ availability)</li>\n<li>Accountability vs. privacy (e.g. audit trails)</li>\n<li>Availability vs. authentication (e.g. account lockout)</li>\n<li>Overhead (computation, communication, storage)</li>\n</ul>\n<h2 id=\"安全系统设计\"><a class=\"markdownIt-Anchor\" href=\"#安全系统设计\"></a> 安全系统设计</h2>\n<ul>\n<li>系统化方法：安全要从需求阶段就纳入设计，事后补安全往往难以奏效。</li>\n<li>风险与成本评估：通过威胁建模和成本—效益分析决定防护深度。</li>\n</ul>\n<h2 id=\"策略\"><a class=\"markdownIt-Anchor\" href=\"#策略\"></a> 策略</h2>\n<ul>\n<li>Focus of control 控制重点\n<ul>\n<li>明确针对谁进行保护。</li>\n<li>例如：\n<ul>\n<li>Data：例如一致性检查</li>\n<li>Operations：允许的调用</li>\n<li>Users: 特定用户的权限</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Complexity vs. Assurance 复杂性与保障性\n<ul>\n<li>简单机制易验证、高可信，但功能有限；复杂系统功能丰富，却难以全面评审。</li>\n<li>功能丰富的安全系统和高可靠性并不容易兼顾</li>\n<li>例如，Linux 权限 vs. Windows 权限</li>\n</ul>\n</li>\n<li>Centralised or Decentralised Controls 集中式或分散式控制\n<ul>\n<li>安全定义和执行应该由中央实体执行，还是应该留给系统中的各个组件？</li>\n<li>中央实体——潜在的瓶颈</li>\n<li>分布式解决方案——效率更高，但管理难度更大</li>\n</ul>\n</li>\n<li>Layered Security 分层安全\n<ul>\n<li>每一层都保护着一个边界</li>\n<li>假设其下层是安全的</li>\n<li>层级一般是：应用 → 服务 → 操作系统 → 内核 → 硬件</li>\n<li>若内核或硬件遭破坏，上层安全机制即失效（如提权漏洞、硬盘偷取、恶意固件）。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"密码学-cryptography\"><a class=\"markdownIt-Anchor\" href=\"#密码学-cryptography\"></a> 密码学 Cryptography</h1>\n<p>密码学（Cryptography）是研究如何在不安全信道中，利用数学算法和协议保障信息的机密性、完整性和不可抵赖性的学科，涵盖对称加密、非对称加密及相关协议设计等内容 。</p>\n<ul>\n<li>Cryptology 密码学</li>\n<li>Cryptography 密码学\n<ul>\n<li>Symmetric 对称性密码：加密和解密算法都使用相同的密钥。\n<ul>\n<li>加密技术保障信息保密性</li>\n<li>对称加密 ≈ “挂锁”</li>\n<li>用于一般通信</li>\n<li>轻量级且快速</li>\n<li>密码管理困难</li>\n<li>使用分组密码或流密码实现\n<ul>\n<li>流密码(Stream ciphers)：使用初始种子密钥来生成无限的随机比特密钥流。\n<ul>\n<li>消息和密钥流通常使用 XOR 进行组合，如果应用两次，则可以逆向。</li>\n<li>优点：\n<ul>\n<li>加密长连续流，可能长度未知</li>\n<li>速度极快，占用内存少，非常适合低功耗设备</li>\n<li>如果设计得当，可以定位到流中的任意位置</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>密钥流必须具有统计随机性</li>\n<li>无法保护密文 ciphertext</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>分组密码(Block Ciphers)：使用密钥将固定大小的明文块加密为固定大小的密文块\n<ul>\n<li>根据密钥更改和排列分组的位</li>\n<li>可以通过拆分消息和填充来处理不同长度的消息</li>\n<li>可以使用混合密钥来防止攻击者逆转该过程</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Asymmetric 非对称密码：使用一对密钥，一个公钥，一个私钥。\n<ul>\n<li>使用一对密钥——公钥（公开）和私钥（保密），一方用公钥加密，只有对应私钥能解密；或用私钥签名，任何持公钥者可验证签名。</li>\n<li>简化了密钥分发，用户只需保管私钥；常用于建立安全通道、数字签名和证书体系，但运算开销较大。</li>\n<li>非对称加密 ≈ “邮箱”</li>\n<li>公钥（非对称）密码学基于以下前提：\n<ul>\n<li>通过公钥计算私钥在计算上是不可行的</li>\n<li>在实践中，这是通过简化为难以解决的（NP）数学问题来实现的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Protocols 协议\n<ul>\n<li>Transport Layer Security (TLS) 传输层安全性\n<ul>\n<li>TLS 是一种提供端到端加密的握手和记录协议。它用于 HTTPS</li>\n<li>具有 机密性、完整性、服务器真实性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cryptanalysis 密码分析学</li>\n</ul>\n<h1 id=\"验证-authentication\"><a class=\"markdownIt-Anchor\" href=\"#验证-authentication\"></a> 验证 Authentication</h1>\n<p>允许用户接入资产，必须保证：</p>\n<ul>\n<li>他们有权限接入该资产</li>\n<li>他们的身份与其声明相符\n<ul>\n<li>我们可以尝试使用凭证(credentials)来验证身份\n<ul>\n<li>Something the user is</li>\n<li>Something the user has</li>\n<li>Something the user knows</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"凭证\"><a class=\"markdownIt-Anchor\" href=\"#凭证\"></a> 凭证</h2>\n<ul>\n<li>定义\n<ul>\n<li>身份识别（Identification）：用户通过用户名或其他标识表明“我是谁”。</li>\n<li>身份验证（Authentication）：使用凭证（“知道的”如密码、“拥有的”如令牌、“生物的”如指纹）确认用户确实是其所声明的身份。</li>\n<li>从检查时间到使用时间：\n<ul>\n<li>重复身份验证</li>\n<li>会话开始时和会话期间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>类型\n<ul>\n<li>知识因素 (Knowledge Factors)\n<ul>\n<li>例如：\n<ul>\n<li>Usernames and Passwords</li>\n</ul>\n</li>\n<li>问题：\n<ul>\n<li>易忘：用户常常忘记复杂密码，被迫写下或重复使用。</li>\n<li>可猜测：弱密码（如“123456”、“qwerty”）极易被暴力或字典攻击破解。</li>\n<li>社会工程与钓鱼：攻击者通过伪装网站或邮件窃取凭证。</li>\n<li>凭证泄露：密码数据库被盗、管理员可读明文或加密存储方式不当均会导致大规模泄露。</li>\n<li>键盘记录（Keylogging）：恶意软件记录输入的字符，直接获取密码。</li>\n</ul>\n</li>\n<li>密码管理器 (Password Managers)\n<ul>\n<li>优点：\n<ul>\n<li>只需记住一个主密码，便可自动生成并填充高强度密码；</li>\n<li>集中管理、提高密码熵和使用便利性。</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>主密码成为单点故障，一旦泄露或忘记，所有账户受影响；</li>\n<li>管理器本身或其云端存储可能遭受攻击或漏洞；</li>\n<li>需确保客户端设备无恶意软件，防止自动填充被劫持。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Inherent / Biometrics 生物识别技术\n<ul>\n<li>定义：\n<ul>\n<li>生物特征识别是指个体独有的、可识别(unique, identifiable)的生物特征</li>\n<li>个体固有的</li>\n</ul>\n</li>\n<li>例子：\n<ul>\n<li>Fingerprints</li>\n<li>Facial recognition</li>\n<li>Iris recognition</li>\n<li>Voice recognition</li>\n<li>Behavioral biometrics\n<ul>\n<li>Dynamics (mouse, keystroke, etc.)</li>\n<li>Gait, posture</li>\n<li>Usage patterns</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优点：\n<ul>\n<li>无需担心丢失访问权限，不会忘记、丢失、放错、被盗等。</li>\n<li>非常方便（当它运行良好时）</li>\n<li>永远无法改变！</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>传感器的可用性？（成本、合规性等）</li>\n<li>误差 Errors: false positives (FAR), false negatives (FRR)</li>\n<li>并非万无一失，例如对抗性机器学习 (adversarial ML)（但在实践中很难攻击）</li>\n<li>道德/隐私问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Possession Factors 占有因素</li>\n<li>例子：\n<ul>\n<li>钥匙</li>\n<li>硬件\n<ul>\n<li>One-Time Passward (OTP)\n<ul>\n<li>传统的：\n<ul>\n<li>用户输入的基于时间/计数器的一次性密码 (OTP)</li>\n<li>临时代码（通常为 6-8 位数字），例如每 30 秒更改一次</li>\n<li>需要人工干预</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>“安全密钥”，例如FIDO/YubiKey</li>\n</ul>\n</li>\n<li>智能卡</li>\n<li>智能机/可穿戴的\n<ul>\n<li>通常存在 single point of failure</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>问题：\n<ul>\n<li>物理丢失、损坏（可用性）或盗窃（定向攻击）</li>\n<li>Usability 可用性（有时良好，例如智能卡，有时不佳，例如一次性密码）</li>\n<li>成本</li>\n</ul>\n</li>\n<li>Multi-Factor Authentication 多重验证</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"哈希函数\"><a class=\"markdownIt-Anchor\" href=\"#哈希函数\"></a> 哈希函数</h2>\n<ul>\n<li>定义：接收任意长度的消息，并返回固定长度的伪随机哈希值，广泛用于完整性校验、消息认证和密码存储。</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">}</mo><mi>n</mi></msup><mo>→</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">}</mo><mn>128</mn></msup></mrow><annotation encoding=\"application/x-tex\">h(M): \\{0, 1\\}^n \\to \\{0,1\\}^{128}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p>特性：</p>\n<ul>\n<li>不可逆：从哈希值无法还原原文；</li>\n<li>抗碰撞：难以找到不同输入产生相同哈希值。</li>\n<li>常见算法：MD5、SHA-1、SHA-256 等，但应优先选择抗碰撞、抗预映像攻击性能更强的新算法。</li>\n</ul>\n</li>\n<li>\n<p>密码加盐 (salting)</p>\n<ul>\n<li>我们可以通过在哈希运算之前在密码前添加随机“盐”来提高安全性。</li>\n<li>加盐就是在用户的明文密码和哈希函数之间，加入一段随机数据（称为“盐”，salt），然后对组合后的结果进行哈希运算</li>\n<li>盐值以未加密的形式与哈希值一起存储</li>\n<li>如果不加盐，多个用户若使用相同密码，其哈希值完全一致，攻击者得知一个账户密码后，就可以轻易推断出其他账户也使用了相同密码。</li>\n<li>加盐对破解单个密码的速度没有影响</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"破解密码-cracking-passwords\"><a class=\"markdownIt-Anchor\" href=\"#破解密码-cracking-passwords\"></a> 破解密码 Cracking Passwords</h2>\n<ul>\n<li>密码破解分为两种基本类型：\n<ul>\n<li>离线：您在本地拥有密码哈希值的副本\n<ul>\n<li>离线密码破解很简单，就是尝试可能的密码，看看是否与密码列表发生哈希碰撞</li>\n<li>可能是暴力破解，但是时间复杂度很高</li>\n</ul>\n</li>\n<li>在线：您没有哈希值，而是试图访问实际的登录终端\n<ul>\n<li>在线破解通常通过网络钓鱼进行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>破解类型\n<ul>\n<li>字典攻击:\n<ul>\n<li>现在大多数密码破解都是通过字典攻击实现的</li>\n<li>使用常用单词和密码字典，对此列表进行细微修改，并尝试所有修改</li>\n<li>组合来自两个不同列表的单词</li>\n</ul>\n</li>\n<li>伪装 Pretexting：\n<ul>\n<li>以某些“借口”获取个人信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考监视器-reference-monitors\"><a class=\"markdownIt-Anchor\" href=\"#参考监视器-reference-monitors\"></a> 参考监视器 Reference Monitors</h1>\n<h2 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h2>\n<ul>\n<li>定义\n<ul>\n<li>参考监视器是一种抽象机制，用于在主体（subjects）对客体（objects）的所有访问之间进行强制执行的访问控制中介。</li>\n<li>必须满足：\n<ul>\n<li>防篡改 tamper proof / resistant</li>\n<li>需要访问对象时必须始终调用(invoked)</li>\n<li>足够小以便可验证/可分析(verifiable / subject)，以确保正确性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>放置位置\n<ul>\n<li>可放置在系统内的任何位置，但是越低越好</li>\n<li>硬件 – 用于定义权限的专用寄存器</li>\n<li>操作系统内核 – 例如虚拟机管理程序</li>\n<li>操作系统 – Windows 安全参考监视器</li>\n<li>服务层 – JVM、.NET</li>\n<li>应用层 – 防火墙</li>\n</ul>\n</li>\n<li>意味着：\n<ul>\n<li>可以确保更高的安全性</li>\n<li>实现简单的结构</li>\n<li>降低性能开销</li>\n<li>减少底层攻击的可能性</li>\n<li>然而，访问控制决策与应用程序相距甚远</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"操作系统完整性-os-integrity\"><a class=\"markdownIt-Anchor\" href=\"#操作系统完整性-os-integrity\"></a> 操作系统完整性 OS Integrity</h2>\n<p>操作系统既是访问控制的仲裁者(Arbitrates access requests)，也是受保护的资源。<br />\n这本身是一种冲突，我们希望使用操作系统但又不希望破坏它。</p>\n<p>要保证完整性，需要：</p>\n<ul>\n<li>操作模式  Modes of Operation\n<ul>\n<li>定义在哪种模式下允许哪些操作，例如系统调用、机器指令、I/O</li>\n<li>CPU 内的状态标志允许操作系统以不同的模式运行</li>\n<li>区分不同人员执行的计算（操作系统、用户）</li>\n</ul>\n</li>\n<li>受控调用 Controlled Invocation\n<ul>\n<li>允许我们在返回用户代码之前安全地执行特权指令</li>\n<li>许多函数在内核层执行，但也可以合理地在用户层代码中调用\n<ul>\n<li>网络和文件 IO</li>\n<li>内存分配</li>\n<li>特权指令（例如 HLT）</li>\n</ul>\n</li>\n<li>我们需要一种在内核模式（Ring 0）和用户模式（Ring 3）之间切换的机制</li>\n<li>中断 (Interrupts)：\n<ul>\n<li>由中断处理程序处理，解决问题并返回到原始代码</li>\n<li>接到中断后，CPU 将切换到中断描述符表中指定的位置执行</li>\n</ul>\n</li>\n<li>描述符和选择器 Descriptors and Selectors\n<ul>\n<li>描述符保存关键系统对象的信息，例如内核结构位置</li>\n<li>描述符保存在描述符表中\n<ul>\n<li>包含描述符特权级别 (DPL)</li>\n</ul>\n</li>\n<li>描述符由选择器索引\n<ul>\n<li>在需要时加载，例如在跳转调用时</li>\n</ul>\n</li>\n<li>CPU 通过在加载选择器时检查当前特权级别 (CPL) 来保护内核\n<ul>\n<li>x86 CPU 中的代码段 (CS) 寄存器保留了 2 位用于存储当前特权级别 (CPL)。</li>\n<li>特权级别高于其指向的描述符被称为门。</li>\n<li>由于这些描述符由内核创建，因此它们提供了一种安全的进入 Ring 0 的方法。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存保护\"><a class=\"markdownIt-Anchor\" href=\"#内存保护\"></a> 内存保护</h2>\n<ul>\n<li>进程之间进行隔离。使用操作系统对进程之间进行联系。</li>\n<li>内存分段 – 将数据划分为逻辑单元\n<ul>\n<li>有利于安全性</li>\n<li>内存管理挑战</li>\n<li>在现代操作系统中不常用</li>\n</ul>\n</li>\n<li>内存分页 – 将内存划分为大小相等的页面\n<ul>\n<li>所有进程都拥有独立的线性地址空间</li>\n<li>页表将线性地址空间映射到物理地址空间</li>\n<li>高效的内存管理</li>\n<li>访问控制效果较差</li>\n<li>在现代操作系统中极为常见</li>\n</ul>\n</li>\n<li>Meltdown\n<ul>\n<li>利用 CPU 推测执行 和 缓存侧信道 漏洞读取本应只在内核态或不同进程中可见的数据</li>\n<li>在大多数操作系统中，整个内核都存储在上层地址空间中。此区域中的页面被标记为主管，并且无法在 Ring 0 之外访问。</li>\n<li>Meltdown 漏洞允许我们读取此特权内存。触发访问违规后续缓存残留，侧向泄露内核内存内容。</li>\n<li>利用侧信道side-channel来实现这一点</li>\n<li>从内核读取</li>\n<li>屏蔽单个位</li>\n<li>访问该位置的用户内存</li>\n</ul>\n</li>\n<li>Spectre\n<ul>\n<li>与 Meltdown 非常相似</li>\n<li>诱导分支预测越界访问，同样借助缓存时间差获取敏感信息</li>\n<li>推测性评估以绕过应用程序边界检查</li>\n<li>屏蔽单个位</li>\n<li>访问该位置的用户内存</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"操作系统\"><a class=\"markdownIt-Anchor\" href=\"#操作系统\"></a> 操作系统</h1>\n<ul>\n<li>职责\n<ul>\n<li>Identification</li>\n<li>Authentication\n<ul>\n<li>身份验证让我们能够向系统验证我们的身份</li>\n<li>一些文件是私有的，一些是公开的</li>\n<li>系统文件应该受到保护</li>\n<li>我们需要能够访问某些应用程序</li>\n</ul>\n</li>\n<li>Access control\n<ul>\n<li>我们需要一种机制来强制执行访问控制</li>\n</ul>\n</li>\n<li>Auditing</li>\n</ul>\n</li>\n<li>特性\n<ul>\n<li>主体/委托人 Subject / Principal  – 活跃实体\n<ul>\n<li>Principal\n<ul>\n<li>可被授予对象访问权限或可发出影响访问控制决策的语句的实体。</li>\n<li>例如，操作系统中的用户身份</li>\n<li>用于讨论安全策略 security policies</li>\n</ul>\n</li>\n<li>Subject\n<ul>\n<li>IT 系统中的活动实体</li>\n<li>以用户身份运行的进程</li>\n<li>用于讨论执行策略的操作系统 operational systems enforcing policies</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>客体 Object – 被访问的资源\n<ul>\n<li>两种控制方式：\n<ul>\n<li>允许主体执行的操作</li>\n<li>可以对对象执行的操作</li>\n</ul>\n</li>\n<li>执行操作：\n<ul>\n<li>读：Simply viewing (Confidentiality)</li>\n<li>写：包括更改、附加和删除 (Integrity)</li>\n<li>执行： 可以在不知道文件内容的情况下运行文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>访问操作 Access operation</li>\n<li>引用监视器 Reference monitor – 授予或拒绝访问</li>\n</ul>\n</li>\n<li>所有权 Ownership\n<ul>\n<li>谁负责制定安全策略？</li>\n<li>Discretionary 自主决定: 可以为每个资源定义所有者</li>\n<li>所有者控制谁有权访问</li>\n<li>强制决定：可以制定系统级策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"unix-and-linux\"><a class=\"markdownIt-Anchor\" href=\"#unix-and-linux\"></a> UNIX and Linux</h2>\n<ul>\n<li>Unix 通过仅考虑所有者、组和其他用户来简化访问控制\n<ul>\n<li>用户是当前所有者</li>\n<li>组是一个命名的组实体\n<ul>\n<li>可以将具有相似访问权限的用户分组</li>\n<li>为组授予访问对象的权限</li>\n</ul>\n</li>\n<li>其他所有人</li>\n</ul>\n</li>\n<li>Unix 提供读取、写入和执行访问控制</li>\n<li>Unix / Linux 中的用户名是软别名，您的 UID 决定了权限\n<ul>\n<li>用户身份：UID</li>\n<li>组身份：GID</li>\n<li>ID 存储在 /etc/passwd 中</li>\n<li>Root 拥有一个特殊的 UID：0</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\"></a> Windows</h2>\n<ul>\n<li>\n<p>Windows 自 NT 时代起，安全子系统分为用户态（User Mode）与内核态（Kernel Mode）两部分</p>\n<ul>\n<li>用户态（User Mode）\n<ul>\n<li>环境子系统（Environment Subsystems）：提供不同 API 环境（如 Win32、POSIX 等）的兼容层。</li>\n<li>安全子系统（Security Subsystem）：运行在用户态，负责登录进程（Winlogon、LogonUI）、本地安全机构（LSA）、安全账户管理器（SAM）等。</li>\n<li>参考监视器（Reference Monitor）：以 LSA 为核心，通过访问令牌（Access Token）和安全描述符（Security Descriptors）对所有主体—客体访问执行检查。</li>\n</ul>\n</li>\n<li>内核态（Kernel Mode）\n<ul>\n<li>Windows Executive：包括进程管理、内存管理、安全与审计等核心服务。</li>\n<li>内核驱动与 HAL：硬件抽象层（HAL）屏蔽底层硬件差异，驱动程序在内核态执行。</li>\n<li>Hyper-V（若启用）：作为最底层的虚拟化监视器，支持虚拟机的隔离与管理。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>权限模型与访问控制</p>\n<ul>\n<li>访问控制列表（ACL）\n<ul>\n<li>每个可保护对象（文件、注册表键、进程、线程、互斥体等）都有一个安全描述符，内含DACL（Discretionary ACL）和SACL（System ACL）。\n<ul>\n<li>DACL：列出允许或拒绝各个主体（SID）的访问权限；支持“读取”、“写入”、“执行”、“删除”、“修改权限”、“取所有权”等多达 32 位的访问掩码。</li>\n<li>SACL：定义哪些访问要被审计。</li>\n<li>支持继承，子对象可从父目录或父容器自动继承 ACL 条目。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>访问控制矩阵（ACM）与能力（Capabilities）\n<ul>\n<li>理论上的 ACM 为主体—客体的二维权限表；Windows 实际通过对象存储的 ACL（对应 ACM 的列）和令牌中的 SID 列表（对应 ACM 的行）来实现。</li>\n<li>能力（Capability）模型可视为 ACM 的行，指某主体对各对象的权限集合；Windows 则把主体拥有的权限封装在访问令牌中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>访问令牌（Access Tokens）</p>\n<ul>\n<li>当用户或服务登录成功后，LSA 为其创建一个访问令牌，内含：\n<ul>\n<li>用户 SID</li>\n<li>所属组 SID 列表（包括本地组、域组及内置别名）</li>\n<li>特权列表（如 SeShutdownPrivilege、SeDebugPrivilege 等）</li>\n<li>默认 DACL（用于创建新对象时的默认权限）</li>\n<li>其他标志（是否启用 UAC 限制令牌、是否为主令牌等）</li>\n</ul>\n</li>\n<li>进程和线程：Windows 中主体为进程和线程，新进程继承父进程令牌（可基于策略做出修改），令牌不可变。</li>\n<li>用户账户控制（UAC）：Vista 及以后，管理员用户登录时会同时获得两个令牌——一个完整令牌（用于提权场景），一个受限令牌（默认用于运行应用），减少攻击面。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"kerberos-在-windows-中的应用\"><a class=\"markdownIt-Anchor\" href=\"#kerberos-在-windows-中的应用\"></a> Kerberos 在 Windows 中的应用</h2>\n<p>KDC（Key Distribution Center）：运行在域控制器上，包含认证服务器（AS）和票据授权服务器（TGS）。<br />\n认证流程：</p>\n<ol>\n<li>客户端向 AS 请求 TGT；</li>\n<li>AS 验证凭据后返回加密的 TGT；</li>\n<li>客户端使用 TGT 向 TGS 请求访问某服务的票据；</li>\n<li>TGS 发放服务票据；</li>\n<li>客户端携带服务票据向目标服务（如文件服务器、SQL Server）进行身份验证。</li>\n</ol>\n<p>票据缓存：用户登录后，TGT 存于本地缓存；访问域内其他服务时无需重复输入凭据。</p>\n<h1 id=\"恶意软件malware\"><a class=\"markdownIt-Anchor\" href=\"#恶意软件malware\"></a> 恶意软件（Malware）</h1>\n<ul>\n<li>定义：恶意软件是指任何以破坏、窃取或中断计算机系统正常功能为目的的软件。</li>\n<li>分类依据：\n<ul>\n<li>传播方式（Proliferation）：是否自我复制，是否依赖用户操作。</li>\n<li>功能效果（Payload）：如展示广告、窃密、僵尸网络、数据加密勒索等。</li>\n</ul>\n</li>\n<li>载体（Vectors）与有效载荷（Payloads）\n<ul>\n<li>载体（Vectors）\n<ul>\n<li>软件漏洞：利用操作系统或应用的安全缺陷自动传播。</li>\n<li>社会工程：钓鱼邮件、恶意网页、附件诱导用户点击。</li>\n</ul>\n</li>\n<li>有效载荷（Payloads）\n<ul>\n<li>无明显作用的“无害”程序</li>\n<li>弹出广告或消息</li>\n<li>加入僵尸网络进行 DDoS 或垃圾邮件发送</li>\n<li>窃取凭证和敏感信息</li>\n<li>加密或破坏文件，要求赎金（勒索）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常见类型包括：\n<ul>\n<li>病毒（Virus）\n<ul>\n<li>必须附着在宿主文件、磁盘或文档上，借助宿主程序运行时激活，自我复制并传播。</li>\n</ul>\n</li>\n<li>蠕虫（Worm）\n<ul>\n<li>独立的可执行程序，无需宿主或人为干预即可自我复制，通过网络漏洞自动传播。</li>\n</ul>\n</li>\n<li>特洛伊木马（Trojan）\n<ul>\n<li>伪装成合法应用或文件，需用户主动执行，不具自我复制能力。</li>\n<li>流行形式：远程控制工具（RAT）、广告/间谍插件、勒索软件</li>\n</ul>\n</li>\n<li>后门（Backdoor）</li>\n<li>Rootkit</li>\n<li>逻辑炸弹（Logic Bomb）</li>\n<li>勒索软件（Ransomware）\n<ul>\n<li>工作流程：\n<ul>\n<li>感染阶段：通过钓鱼邮件、恶意网页或利用漏洞下载执行。</li>\n<li>加密阶段：本地文件或网络共享资源被对称加密；加密密钥再用攻击者的公钥加密。</li>\n<li>勒索阶段：弹出赎金通知，要求用户支付比特币等才能获得私钥解密。</li>\n</ul>\n</li>\n<li>防御难点：即使杀毒软件事后清除进程，加密操作已完成，数据往往无法恢复。</li>\n</ul>\n</li>\n<li>广告软件（Adware）</li>\n<li>间谍软件（Spyware）</li>\n</ul>\n</li>\n<li>防护\n<ul>\n<li>漏洞管理：及时打补丁，关闭不必要的服务与端口。</li>\n<li>邮件与网页防护：部署反钓鱼、反垃圾邮件、Web 安全网关。</li>\n<li>终端保护：使用行为检测、白名单策略、勒索软件防护工具。</li>\n<li>备份恢复：定期离线或异地备份，确保在遭遇加密/破坏时可快速恢复。</li>\n<li>安全教育：提高用户对可疑附件、链接和权限请求的警惕。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"利用exploits\"><a class=\"markdownIt-Anchor\" href=\"#利用exploits\"></a> 利用（Exploits）</h1>\n<p>“利用”指的是利用软件或硬件漏洞，绕过操作系统的安全边界，从而获得对目标系统的未授权访问权限或执行任意代码的能力</p>\n<ul>\n<li>内存管理（Memory Management）\n<ul>\n<li>在 C/C++ 中，程序员必须手动管理内存，虽然灵活高效，但易引入严重漏洞</li>\n<li>常见错误包括\n<ul>\n<li>缓冲区（Buffer Overflows）溢出\n<ul>\n<li>程序执行时，会在内存中为数组（缓冲区）分配连续的空间；如果写入的数据超过缓冲区大小，多余部分将覆盖相邻内存，造成溢出</li>\n<li>典型场景：使用 strcpy 等不做边界检查的库函数，将过长的字符串拷贝到固定长度的缓冲区中。</li>\n</ul>\n</li>\n<li>栈溢出与栈破坏（Stack Overruns &amp; Stack Smashing）\n<ul>\n<li>栈用于存储函数的局部变量和调用信息，每次函数调用会在栈上压入一个栈帧，返回时再弹出</li>\n<li>若 str 长度超过 128 字节，多余部分将覆盖返回地址（ret），使得函数返回时跳转到攻击者控制的地址，进而执行任意代码</li>\n</ul>\n</li>\n<li>堆（Heap Overflows）溢出</li>\n</ul>\n</li>\n<li>防护机制\n<ul>\n<li>栈哨兵（Canaries）：在返回地址前插入随机值（canary），函数返回时检查该值是否被篡改，如被修改则终止程序，防止简单的栈破坏攻击</li>\n<li>数据执行保护（Data Execution Prevention, NX/XD/XN）：将栈段和数据段标记为不可执行，阻止注入的 shellcode 在此区域执行；断点：可通过“返回到 libc”（ret2libc）等技巧绕过</li>\n<li>地址空间布局随机化（ASLR）：随机化可执行文件和库的加载地址，使攻击者无法预测目标地址，增加利用难度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>返回导向编程（Return-Oriented Programming, ROP）\n<ul>\n<li>利用程序或库中已有的短代码片段（gadgets），通过构造伪造的返回地址链，串联执行所需操作，无需注入新的代码。</li>\n<li>常见 gadget 如：pop %eax; ret、movl %eax, (%edx); ret 等，可在工具如 ROPgadget 中搜索</li>\n</ul>\n</li>\n<li>竞争条件（Race Conditions）\n<ul>\n<li>多线程或多进程并发执行时，攻击者可操纵执行顺序，在检查权限与实际使用资源间插入恶意操作。</li>\n<li>示例：先 access(“file”, W_OK) 检查无写权限，随后在 open(“file”, O_WRONLY) 前，将目标文件替换为敏感文件的符号链接，造成写入敏感文件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"网络安全\"><a class=\"markdownIt-Anchor\" href=\"#网络安全\"></a> 网络安全</h1>\n<h2 id=\"tcpip模型\"><a class=\"markdownIt-Anchor\" href=\"#tcpip模型\"></a> TCP/IP模型</h2>\n<p>-不同层级的协议依次封装与解封装。上层协议的数据被下层协议通过添加头部（header）封装。</p>\n<ul>\n<li>\n<p>应用层：为应用提供标准化数据交换接口</p>\n<ul>\n<li>HTTP、SMTP、FTP</li>\n</ul>\n</li>\n<li>\n<p>传输层：负责端到端通信，以及差错控制和流量控制</p>\n<ul>\n<li>TCP、UDP</li>\n</ul>\n</li>\n<li>\n<p>网络层：负责逻辑寻址、路由选择，将数据包从源发送到目的</p>\n<ul>\n<li>IP（v4/v6）、IPSec、ICMP</li>\n<li>IP 协议是无连接、无状态的。IPv4 本身不提供安全保障。IPv6 中安全支持为必选，借助 IPSec 实现</li>\n<li>IPSec\n<ul>\n<li>IPv4 中可选；IPv6 中强制支持</li>\n<li>在网络层提供安全服务</li>\n<li>两大机制：\n<ul>\n<li>AH（Authentication Header）：仅提供报文源身份认证</li>\n<li>ESP（Encapsulating Security Payload）：提供身份认证与加密</li>\n</ul>\n</li>\n<li>不阻止流量分析（包的来源、目的等信息仍可见）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据链路层：在同一网络内通过 MAC 地址和校验和封装帧传输</p>\n<ul>\n<li>以太网、Wi-Fi</li>\n</ul>\n</li>\n<li>\n<p>物理层：使用电气或机械接口进行比特传输</p>\n<ul>\n<li>以太网、Wi-Fi</li>\n</ul>\n</li>\n<li>\n<p>模式</p>\n<ul>\n<li>传输模式（Transport Mode）：\n<ul>\n<li>仅对原始 IP 报文的有效载荷进行加密/认证，保留原 IP 头</li>\n<li>提供主机到主机加密，但仍可被流量分析</li>\n</ul>\n</li>\n<li>隧道模式（Tunnel Mode）：\n<ul>\n<li>将整个原始 IP 包（包含头部和有效载荷）封装为新 IP 包的有效载荷</li>\n<li>提高对流量分析和报文篡改的抵抗力</li>\n<li>常用于 VPN 网关间的加密通信</li>\n</ul>\n</li>\n<li>vs\n<ul>\n<li>传输模式：主机间加密，使用原 IP 头。防止内容被读取，但不防流量分析或 IP 头篡改。</li>\n<li>隧道模式：网关间或主机网关间加密，隐藏原 IP 头。不仅保护内容，也保护原 IP 头免被篡改。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>网络分段与零信任架构</p>\n<ul>\n<li>将大型网络划分为更小的子网（物理或逻辑），便于管理与策略控制</li>\n<li>利用 VLAN、SDN 等技术，实现资源隔离与故障/攻击限域</li>\n<li>零信任原则：“永不信任，始终验证”——内部外部一视同仁，强制多重认证、最小权限</li>\n</ul>\n</li>\n<li>\n<p>无线网络安全</p>\n<ul>\n<li>主流加密协议：WEP（已弃用）、WPA2（现行标准）、WPA3（更安全，兼容性待完善）</li>\n<li>常见威胁：流量嗅探、恶意接入点（Evil Twin/KARMA）、中间人劫持、密码破解（KRACK 漏洞）</li>\n<li>最佳实践：关闭 WPS、使用强口令与企业级认证、分离 IoT 设备 VLAN、部署 WIPS/WIDS</li>\n</ul>\n</li>\n<li>\n<p>拒绝服务（DoS/DDoS）攻击</p>\n<ul>\n<li>通过海量或特制请求耗尽目标资源，使合法用户无法访问</li>\n<li>常见类型：\n<ul>\n<li>SYN 洪水：大量半开连接挤满服务器</li>\n<li>放大攻击（DNS、NTP）：利用开放解析器将小请求放大成大流量</li>\n<li>“低速缓慢”：Slowloris、R-U-Dead-Yet？通过不完成请求拖慢连接</li>\n</ul>\n</li>\n<li>防护策略：部署流量限速、出口过滤、加强协议实现、使用抗 DDoS 服务</li>\n</ul>\n</li>\n<li>\n<p>整体安全思路</p>\n<ul>\n<li>分层防御（Defense in Depth）：多重隔离与检测，保障任一层失守时不致全面崩溃</li>\n<li>持续更新与补丁管理，及时修复已知漏洞</li>\n<li>上下文与角色感知的访问控制，确保最小权限原则贯彻始终</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"防火墙\"><a class=\"markdownIt-Anchor\" href=\"#防火墙\"></a> 防火墙</h1>\n<ul>\n<li>定义：一种硬件和/或软件系统。防止未授权的数据包从一个网络访问另一个网络。所有离开任何子网的数据都必须经过它</li>\n<li>实现“单点”安全措施，通过数据包分析和日志记录进行安全事件监控，通过实施规则集实现基于网络的访问控制</li>\n<li>类型：\n<ul>\n<li>网络防火墙：部署在子网与互联网之间\n<ul>\n<li>家用路由器就是网络防火墙的典型例子</li>\n</ul>\n</li>\n<li>主机防火墙：部署在单台主机上</li>\n</ul>\n</li>\n<li>基本功能：\n<ul>\n<li>防止外部主机访问内部服务</li>\n<li>可限制内部主机访问外部服务（如 IRC、P2P）</li>\n<li>网络地址转换（NAT）：使用私有地址隐藏内部主机</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>无法防护绕过防火墙的攻击（如隧道技术）</li>\n<li>无法防御内部威胁或恶意内部人员</li>\n<li>出口过滤可提供一定帮助</li>\n<li>网络防火墙无法始终阻止携带病毒的程序或文件传输</li>\n</ul>\n</li>\n<li>分组过滤器\n<ul>\n<li>指定允许或丢弃哪些数据包</li>\n<li>规则可基于：\n<ul>\n<li>源/目的 IP 地址</li>\n<li>TCP/UDP 源端口和目的端口号</li>\n</ul>\n</li>\n<li>可同时过滤入站和出站流量</li>\n<li>仅检查包头即可在路由器上实现</li>\n</ul>\n</li>\n<li>分组过滤规则\n<ul>\n<li>规则执行顺序依赖实现\n<ul>\n<li>IPTABLES：匹配到的第一个规则即应用\n<ul>\n<li>用于访问 Linux 防火墙规则表的命令行工具</li>\n<li>本身并非防火墙，而是配置由 netfilter 模块实现的防火墙</li>\n<li>IPTABLES 使用“表”来存储“链”</li>\n<li>默认表为 filter（过滤）表</li>\n<li>链是一系列有序规则\n<ul>\n<li>匹配则跳转（jump）到指定目标</li>\n<li>否则继续检查下一条规则</li>\n</ul>\n</li>\n<li>一张表可包含多个链\n<ul>\n<li>链可以针对协议细分（如专门处理 TCP）</li>\n<li>跳转目标可设为 ACCEPT、DROP、LOG，或另一个链</li>\n<li>通过组合链与跳转可构建复杂行为</li>\n</ul>\n</li>\n<li>默认提供四张表：\n<ul>\n<li>filter（过滤）\n<ul>\n<li>包含三条内置链：INPUT、OUTPUT、FORWARD</li>\n</ul>\n</li>\n<li>nat（地址转换）</li>\n<li>mangle（报文修改）</li>\n<li>raw（跳过连接跟踪）</li>\n</ul>\n</li>\n<li>策略\n<ul>\n<li>宽松（Permissive）策略：默认允许所有流量，仅阻止危险服务\n<ul>\n<li>易于管理，但可能因遗漏规则而导致安全漏洞</li>\n</ul>\n</li>\n<li>严格（Restrictive）策略：默认阻止所有流量，仅允许指定服务端口\n<ul>\n<li>安全性更高，但可能误将自己“锁死”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优势和局限：\n<ul>\n<li>简单、开销小、易于验证正确性</li>\n<li>无法阻止利用应用层协议漏洞的攻击</li>\n<li>无法支持更高级的身份验证</li>\n<li>配置错误时易出现误放或误阻</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>PF：检查所有规则，最后一个匹配的规则应用</li>\n</ul>\n</li>\n<li>规则按“链”组织，每个链是一组逻辑相关的规则</li>\n<li>不同数据包会激活不同的链</li>\n</ul>\n</li>\n<li>应用层网关（Application-level Gateways）\n<ul>\n<li>分组过滤器仅依据头部信息，而应用层网关可深入理解应用层协议</li>\n<li>例如允许 HTTP、SSH，阻止 BitTorrent</li>\n<li>可实现比固定端口规则更复杂的控制</li>\n</ul>\n</li>\n<li>代理服务器 Proxy servers\n<ul>\n<li>代理代表内部主机发起连接</li>\n<li>可阻止特定访问，并扫描文件或网页中的恶意内容</li>\n<li>客户端 → 代理 → 服务器</li>\n<li>服务器 → 代理 → 客户端</li>\n<li>问题：\n<ul>\n<li>每个连接开销大</li>\n<li>比分组过滤器更昂贵</li>\n<li>配置复杂</li>\n<li>每种服务通常需独立代理服务器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>网络地址转换（NAT）\n<ul>\n<li>IP 地址短缺导致大多数路由器自动执行 NAT</li>\n<li>隐式优势\n<ul>\n<li>内部主机对外几乎完全隐藏</li>\n<li>仅将已建立的连接转发到内部主机</li>\n<li>或根据特定的端口转发规则</li>\n<li>防止任何未经请求的随机端口攻击</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"互联网安全\"><a class=\"markdownIt-Anchor\" href=\"#互联网安全\"></a> 互联网安全</h1>\n<ul>\n<li>其他威胁模型的不同之处：\n<ul>\n<li>攻击者并不控制网络</li>\n<li>攻击者无法访问目标操作系统</li>\n</ul>\n</li>\n<li>Cookie\n<ul>\n<li>HTTP 是无状态协议</li>\n<li>而我们的大多数在线操作需要保持“会话状态”</li>\n<li>Cookie 是浏览器用来维持状态的小型文本文件</li>\n<li>工作机制：\n<ul>\n<li>服务器在 HTTP 响应中通过 Set-Cookie 头部下发 Cookie</li>\n<li>浏览器在后续对同一域名的 GET/POST 请求中会自动携带相应 Cookie</li>\n</ul>\n</li>\n<li>类型:\n<ul>\n<li>Session Cookie（会话型）\n<ul>\n<li>浏览器关闭时删除</li>\n<li>不包含过期时间</li>\n</ul>\n</li>\n<li>Persistent Cookie（持久型）\n<ul>\n<li>到达设置的过期时间后失效</li>\n</ul>\n</li>\n<li>Secure Cookie\n<ul>\n<li>仅在 HTTPS 连接下发送</li>\n</ul>\n</li>\n<li>HttpOnly Cookie\n<ul>\n<li>JavaScript 无法访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cookie 与其所属的域名绑定。许多网站会在页面中嵌入第三方广告或资源请求</li>\n<li>Cookie 漏洞：\n<ul>\n<li>Cookie 窃取/劫持：攻击者获取用户 Cookie 信息，从而假冒用户身份，访问账户或数据</li>\n<li>Cookie 投毒：篡改或修改 Cookie 内容，注入恶意代码或数据，可能引发各种安全问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>攻击类型\n<ul>\n<li>跨站脚本（XSS）\n<ul>\n<li>一种注入攻击，类似于 SQL 注入</li>\n<li>浏览器解析 HTML 内容时，将标签视为结构与脚本执行</li>\n<li>如果能够将恶意 HTML/JavaScript 注入页面内容，浏览器会执行这些脚本</li>\n</ul>\n</li>\n<li>反射型 XSS</li>\n<li>利用精心构造的 URL，将恶意脚本作为参数直接反射到服务器返回的页面中</li>\n<li>持久型 XSS\n<ul>\n<li>更危险，无需诱导用户点击恶意链接</li>\n<li>任何对用户输入未正确过滤 HTML 标签的地方都易受影响\n<ul>\n<li>如博客评论区、论坛发帖、购物网站评价等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>防御 XSS\n<ul>\n<li>定位所有处理不可信数据的入口</li>\n<li>根据上下文对输出内容进行适当的 HTML 转义\n<ul>\n<li>在文本节点、属性值、JavaScript 代码、CSS 中的转义方式各有不同</li>\n</ul>\n</li>\n<li>对于交互式网站上的所有用户输入，必须彻底转义，才能防止脚本注入</li>\n</ul>\n</li>\n<li>跨站请求伪造（CSRF/XSRF）\n<ul>\n<li>用户发起 HTTP 请求时，会自动携带相关的会话 Cookie（如登录后的 sessionID）</li>\n<li>如果用户已登录，攻击者只需诱导或自动触发一个请求，即可在用户授权下执行操作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\"></a> 数据库</h1>\n<ul>\n<li>数据库安全是一系列工具、控制机制和措施，旨在建立并维护数据库的：\n<ul>\n<li>机密性（Confidentiality）：保护数据库中的敏感数据不被未授权访问。</li>\n<li>完整性（Integrity）：确保数据库中的数据准确、完整、一致且有效。\n<ul>\n<li>内部一致性（Internal consistency）：数据库条目遵循预定义的规则。</li>\n<li>外部一致性（External consistency）：数据库条目内容正确，符合现实世界的数据。</li>\n</ul>\n</li>\n<li>可用性（Availability）：确保需要时能够及时访问数据库数据。</li>\n</ul>\n</li>\n<li>SQL 安全\n<ul>\n<li>SQL 用于在关系型数据库中检索和更新信息。</li>\n<li>基于三要素实现访问控制：\n<ul>\n<li>用户（Users）</li>\n<li>操作（Actions）</li>\n<li>对象（Objects）</li>\n<li>用户对对象执行操作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","feature":false,"text":" 介绍 作用 ++ 预防 Prevention：防止资产被访问和损坏 检测 Detection：检测资产被访问或损坏的步骤 恢复 Recovery：使我们能够从...","permalink":"/post/笔记/笔记-计算机安全","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"笔记","slug":"笔记","count":9,"path":"api/categories/笔记.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\"> 介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\"> 作用 ++</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-cia\"><span class=\"toc-text\"> 定义 (CIA) ++</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%9C%AC%E7%9F%9B%E7%9B%BE\"><span class=\"toc-text\"> 根本矛盾</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\"> 安全系统设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AD%96%E7%95%A5\"><span class=\"toc-text\"> 策略</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%86%E7%A0%81%E5%AD%A6-cryptography\"><span class=\"toc-text\"> 密码学 Cryptography</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81-authentication\"><span class=\"toc-text\"> 验证 Authentication</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%AD%E8%AF%81\"><span class=\"toc-text\"> 凭证</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 哈希函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81-cracking-passwords\"><span class=\"toc-text\"> 破解密码 Cracking Passwords</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E7%9B%91%E8%A7%86%E5%99%A8-reference-monitors\"><span class=\"toc-text\"> 参考监视器 Reference Monitors</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%8C%E6%95%B4%E6%80%A7-os-integrity\"><span class=\"toc-text\"> 操作系统完整性 OS Integrity</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\"> 内存保护</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 操作系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unix-and-linux\"><span class=\"toc-text\"> UNIX and Linux</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#windows\"><span class=\"toc-text\"> Windows</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#kerberos-%E5%9C%A8-windows-%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> Kerberos 在 Windows 中的应用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6malware\"><span class=\"toc-text\"> 恶意软件（Malware）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8exploits\"><span class=\"toc-text\"> 利用（Exploits）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8\"><span class=\"toc-text\"> 网络安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tcpip%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> TCP&#x2F;IP模型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%98%B2%E7%81%AB%E5%A2%99\"><span class=\"toc-text\"> 防火墙</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8\"><span class=\"toc-text\"> 互联网安全</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\"> 数据库</span></a></li></ol>","author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"语言学习导航","uid":"625e3e920d4d18f0b54366f772b38b35","slug":"导航/导航-语言学习导航","date":"2024-05-24T10:44:53.000Z","updated":"2024-05-27T18:02:00.416Z","comments":true,"path":"api/articles/导航/导航-语言学习导航.json","keywords":null,"cover":"\\img\\post\\导航\\导航-语言学习导航\\cover.jpg","text":"关于语言学习的导航。...","permalink":"/post/导航/导航-语言学习导航","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"导航","slug":"导航","count":4,"path":"api/categories/导航.json"}],"tags":[{"name":"Languaue","slug":"Languaue","count":1,"path":"api/tags/Languaue.json"}],"author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"feature":true},"next_post":{"title":"笔记-安卓开发","uid":"3ae50ab4ba4da3b0252b141ce255837e","slug":"笔记/笔记-安卓开发","date":"2024-10-31T22:58:02.000Z","updated":"2025-01-22T06:19:48.324Z","comments":true,"path":"api/articles/笔记/笔记-安卓开发.json","keywords":null,"cover":"\\img\\post\\笔记\\笔记-安卓开发\\cover.png","text":"关于安卓开发的笔记。...","permalink":"/post/笔记/笔记-安卓开发","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"笔记","slug":"笔记","count":9,"path":"api/categories/笔记.json"}],"tags":[{"name":"JAVA","slug":"JAVA","count":1,"path":"api/tags/JAVA.json"},{"name":"Android","slug":"Android","count":1,"path":"api/tags/Android.json"}],"author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"feature":false}}