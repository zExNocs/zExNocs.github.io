{"title":"ADE - Algorithms Data Structures and Efficiency 算法数据结构和效率","uid":"8e94a57200662cea86ae71df183554b9","slug":"笔记/笔记-ADE-算法数据结构和效率","date":"2024-05-25T00:42:20.000Z","updated":"2024-05-27T03:37:54.411Z","comments":true,"path":"api/articles/笔记/笔记-ADE-算法数据结构和效率.json","keywords":null,"cover":"\\img\\cover\\ADE.png","content":"<h1 id=\"️背景\"><a class=\"markdownIt-Anchor\" href=\"#️背景\"></a> ✒️背景</h1>\n<p>早在一年前就知道了这个有关算法和数据结构的课程。作为一个退役OIer，之前有接触过关于这个课程的内容，比如堆、图论等，因此是对这个课程具有很大兴趣的。</p>\n<p>不过这个课程并不是集中于讲解算法和数据结构，而是着重于使用理论对算法效率的分析，比如说Big-Oh家族。学算法竞赛的时候只是经常听说过和使用过时间复杂度、空间复杂度，不过一直以来对它们的理解都停留在算法在时间和空间上对某一或多种变量/输入的增长程度上，可以说是对这一类知识处于一种一知半解的状态。</p>\n<p>建议使用右边的导航选择性地阅读。</p>\n<h1 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 🔖介绍</h1>\n<p>本笔记着重于介绍使用理论知识分析算法和数据结构的效率，此外还会介绍一些算法和数据结构的抽象功能，以及对这些功能实现的效率分析。</p>\n<p>本笔记主要分为下面四个部分(并不是按照课程顺序排序，而是相似课程归纳)：</p>\n<ul>\n<li>一. 算法效率的评估</li>\n<li>二. Big-Oh家族和理论</li>\n<li>三. Master定理</li>\n<li>四. 数据结构</li>\n<li>五. 算法</li>\n</ul>\n<h1 id=\"一-算法效率的评估\"><a class=\"markdownIt-Anchor\" href=\"#一-算法效率的评估\"></a> 🔬一. 算法效率的评估</h1>\n<p>如何评估一个算法的效率？最直接的方式就是在程序输入后何时才能获得输出值。其中一种比较直观的方式是根据 <strong>程序的运行时间</strong> 来评估测量算法效率。</p>\n<p>在同一个程序中，程序的运行时间往往会随着输入大小(input size)而增加。即使固定输入大小，实际运行时间通常也会有所不同，这取决于输入的详细信息。例如在最短路算法中，即使是相同数量的点和边，不同的连接方法也会导致运行时间不同 <s>(关于SPFA，它死了)</s> 。</p>\n<p>由于你的时间非常值钱，因此我们需要一些方法来对算法的效率进行客观地评估，这些方法主要可以分类为两种：实验统计和理论分析。</p>\n<hr />\n<h3 id=\"方法一experiment-实验统计\"><a class=\"markdownIt-Anchor\" href=\"#方法一experiment-实验统计\"></a> 方法一：Experiment 实验统计</h3>\n<img src=\"/img/ref/ADE/实验统计样例.png\" alt=\"实验统计样例\" width=\"300\">\n<p>实验统计是使用观察和控制变量的方法来对一种现象进行系统的测试和验证。具体步骤如下:</p>\n<ul>\n<li>写一个程序实施该算法</li>\n<li>使用不同的输入大小和输入信息运行程序</li>\n<li>记录实际运行时间</li>\n<li>绘制并使用统计学分析（如回归分析）</li>\n</ul>\n<p>在固定输入大小、不同输入信息中，统计中获得最佳运行时间、最差运行时间、平均运行时间，我们通常会关注<strong>最差的情况</strong>，主要原因是平均时间往往很难以去分析 (例如为什么在判断一个公司工资待遇往往不是使用平均值，更多的是最低工资)。</p>\n<h4 id=\"缺点-局限性\"><a class=\"markdownIt-Anchor\" href=\"#缺点-局限性\"></a> 缺点 &amp; 局限性</h4>\n<ul>\n<li>必须用程序实现该算法，可能会很耗时。</li>\n<li>需要提供大量输入集或者选择合适的输入集来找到最差的情况，不然会导致结果的偏差。</li>\n<li>效率的评估受到硬件/软件/语言环境的影响。</li>\n</ul>\n<hr />\n<h3 id=\"方法二theory-理论分析\"><a class=\"markdownIt-Anchor\" href=\"#方法二theory-理论分析\"></a> 方法二：Theory 理论分析</h3>\n<p>理论分析是基于已有的知识和数据，运用逻辑和数学的方法来对一种现象进行解释和预测。</p>\n<p>跟实验统计一样，我通常指关注<strong>最差的情况</strong>。</p>\n<h4 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\"></a> 特点</h4>\n<ul>\n<li>具有一定的抽象性。</li>\n<li>能够独立于硬件/软件/语言环境来评估算法的效率。</li>\n<li>能够考虑所有可能的输入。</li>\n</ul>\n<h4 id=\"缺点-局限性-2\"><a class=\"markdownIt-Anchor\" href=\"#缺点-局限性-2\"></a> 缺点 &amp; 局限性</h4>\n<ul>\n<li>实施过程可能会比较困难，需要一定的知识基础。</li>\n<li>在现实实施的时候可能有一些特殊情况导致与理论结果相差较大，使用理论解释这种情况可能会比较困难。</li>\n</ul>\n<h4 id=\"评估标准\"><a class=\"markdownIt-Anchor\" href=\"#评估标准\"></a> 评估标准</h4>\n<p>在实验统计中，我们往往使用 <strong>程序的运行时间</strong> 来作为评估的标准，但是在理论知识中我们无法使用这个来作为评估标准。因为程序的运行时间往往受到环境的影响，因此理论难以测量出运行时间，所以我们使用另一种方法来作为理论分析中使用的评估标准：<strong>原始运算数量</strong>。</p>\n<h5 id=\"原始运算的定义\"><a class=\"markdownIt-Anchor\" href=\"#原始运算的定义\"></a> 原始运算的定义</h5>\n<p>原始运算(primitive operations)是算法执行的基本运算。</p>\n<p>在真实的计算机中，实际的运算应该是逻辑门的操作，但是很明显这个是很琐碎的，与算法的运算相差太远。因此我们需要去定义哪些运算属于原始运算以便于记数。一般来说，我们会将<strong>汇编代码</strong>、<strong>算数运算</strong>视作一个原始运算。</p>\n<p>注意，原始运算的定义不是固定的，在这个笔记中，我们将这些操作视作一个原始运算：</p>\n<table>\n<thead>\n<tr>\n<th>描述</th>\n<th>伪代码样例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>变量赋值</td>\n<td>a ← 0</td>\n</tr>\n<tr>\n<td>数组索引</td>\n<td>a[10]</td>\n</tr>\n<tr>\n<td>变量比较</td>\n<td>a == 10</td>\n</tr>\n<tr>\n<td>算数运算</td>\n<td>a + 1</td>\n</tr>\n<tr>\n<td>函数调用</td>\n<td>function()</td>\n</tr>\n<tr>\n<td>函数返回</td>\n<td>return 0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong></p>\n<ul>\n<li>在本笔记中我们忽视了汇编中有关jump的指令，即本笔记中默认jump指令原始运算为0。</li>\n<li>数组索引需要用到袁术运算是因为它需要在内存中进行索引。</li>\n<li>函数调用属于原始运算是因为它需要在内存中进行索引。</li>\n<li>在CPU中，浮点运算(如除法)实际上是一个非常复杂的算法。但在汇编语言中，它只是一个指令，因此我们也将其视作一个原始运算。</li>\n</ul>\n<p>对于其他的运算，都可以拆分为这些原始运算：</p>\n<table>\n<thead>\n<tr>\n<th>描述</th>\n<th>分析</th>\n<th>操作数</th>\n<th>伪代码样例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>for循环，循环次数为n</td>\n<td>要经历1次初始赋值；n次判断；n次叠加，每次叠加是两个原始运算(加法和赋值)</td>\n<td>1+n+2n = 3n+1</td>\n<td>for i ← 1 to n do</td>\n</tr>\n<tr>\n<td>for循环，循环次数为(n-1)</td>\n<td>要经历1次初始赋值；(n-1)次判断，每次判断是两个原始运算(减法和比较)；(n-1)次叠加，每次叠加是两个原始运算(加法和赋值)</td>\n<td>1+2(n-1)+2(n-1) = 4n-3</td>\n<td>for i ← 1 to (n-1) do</td>\n</tr>\n<tr>\n<td>while循环，循环次数为n</td>\n<td>每次循环只需要判断即可</td>\n<td>n</td>\n<td>while i &gt; n</td>\n</tr>\n<tr>\n<td>while循环，循环次数为(n-1)</td>\n<td>每次循环都需要进行判断和减法</td>\n<td>2(n-1)</td>\n<td>while i &gt; (n-1)</td>\n</tr>\n<tr>\n<td>if then判断，then内部原始运算数为k</td>\n<td>一个判断。由于我们是统计最差次数，因此我们需要将if里原始运算进行累加(默认触发)</td>\n<td>1 + k</td>\n<td>if … then …</td>\n</tr>\n</tbody>\n</table>\n<details class=\"custom-details\">\n<summary>一个计算原始运算数的例子</summary>\n<p>一个返回数组最大值的伪代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Algorithm arrayMax(A, n)    # A为数组，n为数组大小，即数组从0开始，(n-1)结束。</span><br><span class=\"line\">  currentMax ← A[0]         # 原始运算数为2，分别是数组索引和赋值</span><br><span class=\"line\">  for i ← 1 to (n - 1) do   # (n-1)次数的循环运算，原始运算数为(4n-3)</span><br><span class=\"line\">    if A[i] &gt; currentMax    # 每次循环原始运算数为2，分别是数组索引和判断，共(n-1)次循环，原始运算数为2(n-1)</span><br><span class=\"line\">      currentMax ← A[i]     # then内部运算。每次循环原始运算数为2，分别是数组索引和赋值，原始运算数为2(n-1)</span><br><span class=\"line\">  return currentMax         # 原始运算为1，函数返回</span><br></pre></td></tr></table></figure>\n<p>综上所述，这个算法的原始运算总数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>2</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>2</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>8</mn><mi>n</mi><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">2 + (4n - 3) + 2(n - 1) + 2(n - 1) + 1 = 8n - 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">8</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span></p>\n\n</details>\n<h1 id=\"二-big-oh家族和理论\"><a class=\"markdownIt-Anchor\" href=\"#二-big-oh家族和理论\"></a> 二. 🏠Big-Oh家族和理论</h1>\n<p>// TODO</p>\n<h1 id=\"三-master定理\"><a class=\"markdownIt-Anchor\" href=\"#三-master定理\"></a> 三. 🏫Master定理</h1>\n<p>// TODO</p>\n<h1 id=\"四-数据结构\"><a class=\"markdownIt-Anchor\" href=\"#四-数据结构\"></a> 四. 🔒数据结构</h1>\n<p>// TODO</p>\n<h1 id=\"五-算法\"><a class=\"markdownIt-Anchor\" href=\"#五-算法\"></a> 五. 💻算法</h1>\n<p>// TODO</p>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> 📘Reference</h1>\n","feature":false,"text":"有关算法效率分析的课题笔记，包括Big-Oh家族、Master定理和部分算法与数据结构的算法分析。...","permalink":"/post/笔记/笔记-ADE-算法数据结构和效率","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"笔记","slug":"笔记","count":3,"path":"api/categories/笔记.json"}],"tags":[{"name":"Notes","slug":"Notes","count":3,"path":"api/tags/Notes.json"},{"name":"Algorithm","slug":"Algorithm","count":3,"path":"api/tags/Algorithm.json"},{"name":"Data Structure","slug":"Data-Structure","count":2,"path":"api/tags/Data-Structure.json"},{"name":"Big Oh","slug":"Big-Oh","count":1,"path":"api/tags/Big-Oh.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%EF%B8%8F%E8%83%8C%E6%99%AF\"><span class=\"toc-text\"> ✒️背景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\"> 🔖介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E7%9A%84%E8%AF%84%E4%BC%B0\"><span class=\"toc-text\"> 🔬一. 算法效率的评估</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80experiment-%E5%AE%9E%E9%AA%8C%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\"> 方法一：Experiment 实验统计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9-%E5%B1%80%E9%99%90%E6%80%A7\"><span class=\"toc-text\"> 缺点 &amp; 局限性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8Ctheory-%E7%90%86%E8%AE%BA%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 方法二：Theory 理论分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\"> 特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9-%E5%B1%80%E9%99%90%E6%80%A7-2\"><span class=\"toc-text\"> 缺点 &amp; 局限性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%84%E4%BC%B0%E6%A0%87%E5%87%86\"><span class=\"toc-text\"> 评估标准</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%A7%8B%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 原始运算的定义</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-big-oh%E5%AE%B6%E6%97%8F%E5%92%8C%E7%90%86%E8%AE%BA\"><span class=\"toc-text\"> 二. 🏠Big-Oh家族和理论</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-master%E5%AE%9A%E7%90%86\"><span class=\"toc-text\"> 三. 🏫Master定理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\"> 四. 🔒数据结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 五. 💻算法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\"> 📘Reference</span></a></li></ol>","author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"AIM - Optimization 优化算法","uid":"ca7a89ba385cdbc1ce7b55d4c88122bd","slug":"笔记/笔记-AIM-优化算法","date":"2024-05-25T10:52:11.000Z","updated":"2024-05-25T11:17:26.388Z","comments":true,"path":"api/articles/笔记/笔记-AIM-优化算法.json","keywords":null,"cover":"\\img\\cover\\AIM.png","text":"有关优化算法(元启发式、超启发式)的课程笔记。...","permalink":"/post/笔记/笔记-AIM-优化算法","photos":[],"count_time":{"symbolsCount":180,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":3,"path":"api/categories/笔记.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":3,"path":"api/tags/Algorithm.json"},{"name":"AI","slug":"AI","count":1,"path":"api/tags/AI.json"},{"name":"Optimization","slug":"Optimization","count":1,"path":"api/tags/Optimization.json"}],"author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"feature":false},"next_post":{"title":"算法和数据结构导航","uid":"f2a68e25ffce8d6b8f475f30117ea7f4","slug":"导航/导航-算法和数据结构导航","date":"2024-05-24T17:43:22.000Z","updated":"2024-05-25T00:57:44.060Z","comments":true,"path":"api/articles/导航/导航-算法和数据结构导航.json","keywords":null,"cover":"\\img\\cover\\算法和数据结构导航.jpg","text":"关于算法与数据结构博客的导航。...","permalink":"/post/导航/导航-算法和数据结构导航","photos":[],"count_time":{"symbolsCount":10,"symbolsTime":"1 mins."},"categories":[{"name":"导航","slug":"导航","count":4,"path":"api/categories/导航.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":3,"path":"api/tags/Algorithm.json"},{"name":"Data Structure","slug":"Data-Structure","count":2,"path":"api/tags/Data-Structure.json"}],"author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"feature":true}}