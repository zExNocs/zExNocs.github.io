{"title":"MC插件开发对项目和游戏引擎设计的思考","uid":"75074d75debd3a13d00431331559c0a9","slug":"随笔/随笔-MC插件开发对游戏引擎设计的思考","date":"2024-10-18T15:04:02.000Z","updated":"2024-11-01T23:12:14.940Z","comments":true,"path":"api/articles/随笔/随笔-MC插件开发对游戏引擎设计的思考.json","keywords":null,"cover":"\\img\\post\\随笔\\随笔-MC插件开发对游戏引擎设计的思考\\cover.png","content":"<h1 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 🔖介绍</h1>\n<hr />\n<h1 id=\"1-游戏阶段树-场景\"><a class=\"markdownIt-Anchor\" href=\"#1-游戏阶段树-场景\"></a> 1. 游戏阶段树 (场景)</h1>\n<hr />\n<h1 id=\"2-事件与其观察者\"><a class=\"markdownIt-Anchor\" href=\"#2-事件与其观察者\"></a> 2. 事件与其观察者</h1>\n<hr />\n<h1 id=\"3-依赖注入dependency-injection-和-控制反转inversion-of-controlioc\"><a class=\"markdownIt-Anchor\" href=\"#3-依赖注入dependency-injection-和-控制反转inversion-of-controlioc\"></a> 3. 依赖注入(Dependency Injection) 和 控制反转(Inversion of Control，IoC)</h1>\n<p>依赖注入是一种软件设计模式，用于实现控制反转，从而实现对象之间的解耦和提高代码的可测试性和可维护性。它的核心思想是将对象的依赖关系从对象内部转移到外部管理（通常是一个容器或框架）。</p>\n<p>依赖注入常见的三种方式：</p>\n<ul>\n<li>构造函数注入</li>\n<li>方法注入：setter</li>\n<li>属性注入：通常使用反射或注解实现(@Inject)</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>解耦</li>\n<li>提高测试性：可以通过mock简化单元测试</li>\n<li>增加灵活性：可以通过简单替换依赖的类来扩展不同实现的版本</li>\n</ul>\n<hr />\n<h1 id=\"4-组合大于继承\"><a class=\"markdownIt-Anchor\" href=\"#4-组合大于继承\"></a> 4. 组合大于继承</h1>\n","feature":false,"text":"这是一个关于对项目和游戏引擎设计的随笔。...","permalink":"/post/随笔/随笔-MC插件开发对游戏引擎设计的思考","photos":[],"count_time":{"symbolsCount":322,"symbolsTime":"1 mins."},"categories":[{"name":"随笔","slug":"随笔","count":5,"path":"api/categories/随笔.json"}],"tags":[{"name":"game engine","slug":"game-engine","count":1,"path":"api/tags/game-engine.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\"> 🔖介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%B8%B8%E6%88%8F%E9%98%B6%E6%AE%B5%E6%A0%91-%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\"> 1. 游戏阶段树 (场景)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%85%B6%E8%A7%82%E5%AF%9F%E8%80%85\"><span class=\"toc-text\"> 2. 事件与其观察者</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5dependency-injection-%E5%92%8C-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACinversion-of-controlioc\"><span class=\"toc-text\"> 3. 依赖注入(Dependency Injection) 和 控制反转(Inversion of Control，IoC)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E7%BB%84%E5%90%88%E5%A4%A7%E4%BA%8E%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\"> 4. 组合大于继承</span></a></li></ol>","author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"雅思","uid":"487367ff609355e6216873e9408d459b","slug":"笔记/笔记-雅思","date":"2024-10-18T19:24:57.000Z","updated":"2024-10-19T04:01:56.346Z","comments":true,"path":"api/articles/笔记/笔记-雅思.json","keywords":null,"cover":"\\img\\post\\笔记\\笔记-雅思\\cover.jpg","text":"雅思。...","permalink":"/post/笔记/笔记-雅思","photos":[],"count_time":{"symbolsCount":491,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":10,"path":"api/categories/笔记.json"}],"tags":[],"author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"feature":false},"next_post":{"title":"IRP - AI解魔方笔记","uid":"512aeab9edfa5572793cd5cb4da0bb70","slug":"笔记/笔记-IRP-AI解魔方笔记","date":"2024-10-18T00:44:00.000Z","updated":"2024-10-22T21:48:42.184Z","comments":true,"path":"api/articles/笔记/笔记-IRP-AI解魔方笔记.json","keywords":null,"cover":"\\img\\post\\笔记\\笔记-IRP-AI解魔方笔记\\cover.jpg","text":"有关从启发式算法到机器学习、深度学习解魔方的笔记。...","permalink":"/post/笔记/笔记-IRP-AI解魔方笔记","photos":[],"count_time":{"symbolsCount":289,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":10,"path":"api/categories/笔记.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":5,"path":"api/tags/Algorithm.json"},{"name":"AI","slug":"AI","count":3,"path":"api/tags/AI.json"},{"name":"Optimization","slug":"Optimization","count":3,"path":"api/tags/Optimization.json"},{"name":"Machine Learning","slug":"Machine-Learning","count":1,"path":"api/tags/Machine-Learning.json"},{"name":"Deep Learning","slug":"Deep-Learning","count":1,"path":"api/tags/Deep-Learning.json"}],"author":{"name":"zExNocs","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"一个喜欢摸鱼的人。<p>去码头整点薯条。</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/img/svg/github.svg","link":"https://github.com/zExNocs"},"bilibili":{"icon":"/img/svg/bilibili.svg","link":"https://space.bilibili.com/13423200"},"steam":{"icon":"/img/svg/steam.svg","link":"https://steamcommunity.com/id/zExNocs/"},"QQ":{"icon":"/img/svg/QQ.svg","link":"https://qm.qq.com/q/XtwuUQpNCg"}}}},"feature":false}}